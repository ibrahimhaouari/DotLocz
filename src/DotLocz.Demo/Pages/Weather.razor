@page "/weather"
@inject HttpClient Http
@inject IStringLocalizer<PagesResources> Localizer

<PageTitle>@Localizer.Get(PagesResources.Weather)</PageTitle>

<h1>@Localizer.Get(PagesResources.Weather)</h1>

<p>@Localizer.Get(PagesResources.WeatherPageSubtitle)</p>

@if (forecasts == null)
{
    <p><em>@Localizer.Get(PagesResources.Loading)...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>@Localizer.Get(PagesResources.Data)</th>
            <th>@Localizer.Get(PagesResources.TempC)</th>
            <th>@Localizer.Get(PagesResources.TempF)</th>
            <th>@Localizer.Get(PagesResources.Summary)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@Localizer[forecast.Summary ?? ""]</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
